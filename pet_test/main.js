// const qaPairs = [
//   {
//     "question": "Основные принципы ООП?",
//     "answer": `1. **Инкапсуляция (Encapsulation):**
//        - *Определение:* Инкапсуляция представляет собой принцип сокрытия деталей реализации и предоставления интерфейса для взаимодействия с объектом.
//        - *Пример:* Класс с методами и свойствами, где методы обеспечивают доступ к данным и их изменение, а детали реализации скрыты.


//     2. **Наследование (Inheritance):**
//        - *Определение:* Наследование позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.
//        - *Пример:* Класс "Птица" наследует от класса "Животное", получая общие характеристики, но может иметь уникальные свойства, например, "размах крыльев".


//     3. **Полиморфизм (Polymorphism):**
//        - *Определение:* Полиморфизм позволяет объектам использовать методы базового класса в специфичной для своего класса форме.
//        - *Пример:* Метод "рисовать" в различных классах (круг, квадрат) будет реализован по-разному, но интерфейс остается одинаковым.


//     4. **Абстракция (Abstraction):**
//        - *Определение:* Абстракция предоставляет упрощенное представление объекта, скрывая ненужные детали.
//        - *Пример:* Когда мы работаем с автомобилем, нас интересует его движение и управление, а не внутренние механизмы работы двигателя.


//     5. **Композиция (Composition):**
//        - *Определение:* Композиция позволяет создавать сложные объекты из более простых, объединяя их в один объект.
//        - *Пример:* Объект "Автомобиль" может включать в себя объекты "Двигатель", "Колеса" и "Руль".


//     Эти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.
//     `
//   },
//   {
//     "question": "Что такое SOLID?",
//     "answer": `1. **Принцип единственной ответственности (Single Responsibility Principle - SRP):**
//        - *Определение:* Каждый класс должен иметь только одну причину для изменения.
//        - *Пример:* Класс управления базой данных не должен быть ответственен за отображение данных. Разделение ответственности улучшает поддерживаемость кода.

//     2. **Принцип открытости/закрытости (Open/Closed Principle - OCP):**
//        - *Определение:* Программные сущности должны быть открыты для расширения, но закрыты для модификации.
//        - *Пример:* Использование интерфейсов и абстрактных классов для создания расширяемых модулей без изменения исходного кода.

//     3. **Принцип подстановки Барбары Лисков (Liskov Substitution Principle - LSP):**
//        - *Определение:* Объект базового класса должен быть заменяем объектом его производного класса без изменения корректности программы.
//        - *Пример:* Если у нас есть класс "Птица", то мы должны безопасно использовать его подклассы, такие как "Ласточка" или "Орёл", не нарушая логику программы.

//     4. **Принцип разделения интерфейса (Interface Segregation Principle - ISP):**
//        - *Определение:* Клиенты не должны зависеть от интерфейсов, которые они не используют.
//        - *Пример:* Разделение интерфейсов для разных клиентов, чтобы каждый клиент имел доступ только к необходимым методам.

//     5. **Принцип инверсии зависимостей (Dependency Inversion Principle - DIP):**
//        - *Определение:* Модули верхнего уровня не должны зависеть от модулей нижнего уровня. Оба типа модулей должны зависеть от абстракций.
//        - *Пример:* Внедрение зависимости (dependency injection) для обеспечения обратной зависимости между модулями.

//     Эти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.
//     `
//   },
//   {
//     "question": "Разница между классовым и прототипным наследованием?",
//     "answer":  `### Разница между классовым и прототипным наследованием в JavaScript:

//     1. **Классовое наследование:**
//        - *Определение:* Введено в ECMAScript 2015 (ES6) с использованием ключевого\n слова 'class'.
//        - *Синтаксис:*\n
//          'javascript
//          class Animal {
//            constructor(name) {
//              this.name = name;
//            }

//            sound() {
//              console.log('Generic animal sound');
//            }
//          }

//          class Dog extends Animal {
//            constructor(name, breed) {
//              super(name);
//              this.breed = breed;
//            }

//            sound() {
//              console.log('Bark');
//            }
//          }

//          const myDog = new Dog('Buddy', 'Labrador');
//         '

//     2. **Прототипное наследование:**
//        - *Определение:* Базируется на использовании прототипов объектов.
//        - *Синтаксис:*
//          'javascript
//          function Animal(name) {
//            this.name = name;
//          }

//          Animal.prototype.sound = function() {
//            console.log('Generic animal sound');
//          };

//          function Dog(name, breed) {
//            Animal.call(this, name);
//            this.breed = breed;
//          }

//          Dog.prototype = Object.create(Animal.prototype);
//          Dog.prototype.constructor = Dog;

//          Dog.prototype.sound = function() {
//            console.log('Bark');
//          };

//          const myDog = new Dog('Buddy', 'Labrador');
//          '

//     **Различия:**

//     - **Синтаксис:** Классы предоставляют более удобный и декларативный синтаксис\n для создания и наследования объектов.
//     - **Ключевые слова:** В классах используются ключевые слова 'class', 'extends', и 'super', что делает код более ясным.
//     - **Прототипы:** В прототипном наследовании работа напрямую с прототипами объектов, создавая цепочку прототипов.

//     **Общее:**

//     - В классовом наследовании под капотом также используются прототипы, но скрыты от\n разработчика.
//     - Использование 'super' в классах и 'Object.create()' в прототипном наследовании для вызова конструкторов родительских классов/функций.

//     Выбор между классовым и прототипным наследованием зависит от стиля разработки и\n требований проекта. В современных приложениях классы чаще предпочтительны.
//     `
//   }
// ];




const qaPairs = [
  {
    "topic": "Основы ООП",
    "question": "Основные принципы ООП?",
    "answer": 'Основные принципы ООП:\n1. Инкапсуляция (Encapsulation):\n\n- Определение: Инкапсуляция представляет собой принцип сокрытия деталей реализации и предоставления интерфейса для взаимодействия с объектом.\n\n- Пример: Класс с методами и свойствами, где методы обеспечивают доступ к данным и их изменение, а детали реализации скрыты.\n\n2. Наследование (Inheritance):\n\n- Определение: Наследование позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.\n\n- Пример: Класс "Птица" наследует от класса "Животное", получая общие характеристики, но может иметь уникальные свойства, например, "размах крыльев".\n\n3. Полиморфизм (Polymorphism):\n\n- Определение: Полиморфизм позволяет объектам использовать методы базового класса в специфичной для своего класса форме.\n\n- Пример: Метод "рисовать" в различных классах (круг, квадрат) будет реализован по-разному, но интерфейс остается одинаковым.\n\n4. Абстракция (Abstraction):\n\n- Определение: Абстракция предоставляет упрощенное представление объекта, скрывая ненужные детали.\n\n- Пример: Когда мы работаем с автомобилем, нас интересует его движение и управление, а не внутренние механизмы работы двигателя.\n\n5. Композиция (Composition):\n\n- Определение: Композиция позволяет создавать сложные объекты из более простых, объединяя их в один объект.\n\n- Пример: Объект "Автомобиль" может включать в себя объекты "Двигатель", "Колеса" и "Руль".\n\nЭти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.'
  },
  {
    "topic": "Основы ООП",
    "question": "2.	Что такое SOLID?",
    "answer": 'Основные принципы ООП:\n1. Инкапсуляция (Encapsulation):\n\n- Определение: Инкапсуляция представляет собой принцип сокрытия деталей реализации и предоставления интерфейса для взаимодействия с объектом.\n- Пример: Класс с методами и свойствами, где методы обеспечивают доступ к данным и их изменение, а детали реализации скрыты.\n\n2. Наследование (Inheritance):\n\n- Определение: Наследование позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.\n- Пример: Класс "Птица" наследует от класса "Животное", получая общие характеристики, но может иметь уникальные свойства, например, "размах крыльев".\n\n3. Полиморфизм (Polymorphism):\n\n- Определение: Полиморфизм позволяет объектам использовать методы базового класса в специфичной для своего класса форме.\n- Пример: Метод "рисовать" в различных классах (круг, квадрат) будет реализован по-разному, но интерфейс остается одинаковым.\n\n4. Абстракция (Abstraction):\n\n- Определение: Абстракция предоставляет упрощенное представление объекта, скрывая ненужные детали.\n- Пример: Когда мы работаем с автомобилем, нас интересует его движение и управление, а не внутренние механизмы работы двигателя.\n\n5. Композиция (Composition):\n\n- Определение: Композиция позволяет создавать сложные объекты из более простых, объединяя их в один объект.\n- Пример: Объект "Автомобиль" может включать в себя объекты "Двигатель", "Колеса" и "Руль".\n\nЭти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.'
  },
  // ... другие вопросы ...
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Каковы основные принципы технической инфраструктуры Интернета, и в чем заключается разница между Интернетом и Вебом?",
    "answer": "Основные принципы технической инфраструктуры Интернета включают в себя идею объединения большого количества компьютеров в одну сеть для обмена информацией. Интернет - это большая сеть компьютеров, которые взаимодействуют друг с другом.\n\nРазница между Интернетом и Вебом заключается в том, что Интернет - это техническая инфраструктура, обеспечивающая соединение компьютеров, в то время как Веб - это одна из услуг, предоставляемых на основе Интернета. Веб представляет собой сервис, где определенные компьютеры, называемые веб-серверами, могут отправлять понятные браузерам сообщения. Таким образом, Интернет является инфраструктурой, а Веб - это одна из услуг, работающая поверх этой инфраструктуры."
  },
  // ... другие вопросы ...
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Каковы основные принципы технической инфраструктуры Интернета, и в чем заключается разница между Интернетом и Вебом?",
    "answer": "Развитие Интернета началось в 1960-х годах как исследовательский проект, финансируемый армией США. В 1980-х годах он превратился в публичную инфраструктуру с поддержкой университетов и частных компаний. Ключевые этапы в истории Интернета включают его начало как военного исследовательского проекта в 1960-х, эволюцию в публичную инфраструктуру в 1980-х, и последующее развитие технологий, хотя основные принципы его работы остались неизменными."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как работает сеть между двумя компьютерами, и почему использование роутера становится важным при подключении большего количества компьютеров?",
    "answer": "Когда два компьютера должны взаимодействовать, их необходимо связать, обычно с использованием физического соединения, такого как Ethernet-кабель, или беспроводных технологий, например, Wi-Fi или Bluetooth. В статье упоминается, что при подключении большего количества компьютеров становится проблематичным использование прямого соединения, так как это требует множества кабелей.\n\nДля решения этой проблемы каждый компьютер на сети подключается к специальному устройству, называемому роутером. Роутер выполняет роль сигнального агента на станции, направляя сообщения от одного компьютера к другому и управляя передачей данных. Таким образом, роутер позволяет эффективно связывать большое количество компьютеров, минимизируя количество необходимых соединительных кабелей.\n\nВажность роутера заключается в том, что он действует как посредник, обеспечивая правильную передачу сообщений между компьютерами в сети. Это позволяет эффективно управлять обменом данными и избежать необходимости использования большого количества прямых соединений между каждой парой компьютеров."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Почему использование модема важно для подключения нашей сети к телефонной инфраструктуре?",
    "answer": "Использование модема важно для подключения нашей сети к телефонной инфраструктуре, потому что модем выполняет функцию преобразования информации из нашей компьютерной сети в формат, который может передаваться по телефонным линиям, и наоборот. Модем преобразует цифровые данные компьютера в аналоговые сигналы, которые могут передаваться через телефонные провода, и обратно. Таким образом, модем обеспечивает совместимость между цифровыми данными компьютера и аналоговой телефонной инфраструктурой, позволяя нам подключаться к Интернету через телефонные линии."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как сообщения передаются через Интернет от исходной сети к целевой, и как в этот процесс вовлечены поставщики услуг Интернета (ISP)?",
    "answer": "Сообщения передаются через Интернет от исходной сети к целевой следующим образом. Первым шагом компьютер, отправляющий сообщение, отправляет его своему роутеру. Роутер направляет сообщение к другим роутерам, используя сеть роутеров, соединенных между собой. Когда сообщение достигает роутера поставщика услуг Интернета (ISP), ISP принимает его и маршрутизирует дальше через свою сеть.\n\nЗатем сообщение проходит через сеть различных ISP, если необходимо, и, наконец, достигает целевого роутера. Этот роутер направляет сообщение к конечному компьютеру-получателю. Таким образом, поставщики услуг Интернета играют роль посредников в передаче сообщений, обеспечивая их маршрутизацию через различные части Интернета до достижения целевого узла."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Какова роль IP-адреса в сети, и как он используется для отправки сообщений компьютеру?",
    "answer": "Роль IP-адреса в сети заключается в том, чтобы уникально идентифицировать каждый компьютер или устройство в сети. IP-адрес (где IP означает Internet Protocol) представляет собой уникальный набор чисел, который присваивается каждому устройству, подключенному к сети. Этот адрес используется для точного определения отправителя и получателя сообщений.\n\nКогда компьютер отправляет сообщение, оно снабжается IP-адресом получателя. Этот адрес указывает, куда должно быть направлено сообщение в сети. Роутеры и другие устройства на пути сообщения используют IP-адреса для маршрутизации данных к конечному узлу, который имеет соответствующий IP-адрес.\n\nТаким образом, IP-адрес играет ключевую роль в определении и маршрутизации сообщений в сети, обеспечивая точную доставку данных от отправителя к получателю."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Какие преимущества и особенности у веб-браузера при взаимодействии с Интернетом?",
    "answer": "Веб-браузер предоставляет пользователю доступ к Интернету и обладает несколькими преимуществами и особенностями. Основная функция браузера - отображение веб-страниц, что позволяет пользователям легко перемещаться между различными сайтами, используя функции навигации, такие как гиперссылки.\n\nБраузер позволяет пользователям сохранять закладки на интересующие их страницы и вести историю посещенных сайтов для более удобного доступа к ним в будущем. Он также поддерживает различные форматы контента, включая изображения, видео и звук, обогащая пользовательский опыт.\n\nПользователи могут расширять функциональность браузера, устанавливая различные дополнения, такие как блокировщики рекламы, менеджеры паролей и темы. Современные браузеры обеспечивают высокий уровень безопасности, защищая от вредоносных программ, и предоставляют режим приватности для безопасного просмотра без сохранения истории и данных.\n\nБраузеры также облегчают ввод информации, автоматически заполняя данные в веб-формах. Их совместимость с различными операционными системами позволяет пользователям выбирать удобное устройство для доступа к интернету. В целом, веб-браузеры предоставляют удобный и многофункциональный инструмент для взаимодействия с Интернетом, обеспечивая разнообразные возможности и комфорт при использовании сети."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "В чем отличие между Интернетом и Вебом, и какой сервис предоставляется на основе Интернета?",
    "answer": "Отличие между Интернетом и Вебом заключается в следующем:\n\n1. **Интернет:** Это техническая инфраструктура, обеспечивающая соединение множества компьютеров по всему миру. Интернет представляет собой огромную сеть, где компьютеры могут взаимодействовать друг с другом. Это базовая инфраструктура, объединяющая компьютеры, чтобы они могли обмениваться информацией.\n\n2. **Веб:** Это одна из услуг, предоставляемых на основе Интернета. Веб (или Всемирная паутина) представляет собой сервис, где определенные компьютеры, известные как веб-серверы, могут отправлять понятные браузерам сообщения. Когда мы говорим о просмотре веб-страниц, отправке электронной почты или использовании других веб-сервисов, мы обращаемся именно к услуге Веба.\n\nТаким образом, Интернет - это техническая основа, объединяющая компьютеры в глобальную сеть, а Веб - это одна из многих услуг, работающих поверх этой инфраструктуры. Важно отметить, что помимо Веба на основе Интернета существуют и другие сервисы, такие как электронная почта и IRC (Internet Relay Chat)."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Что такое интранеты и экстранеты, и как они используют общую инфраструктуру Интернета для организации внутренней и внешней коммуникации в компаниях?",
    "answer": "Интранеты и экстранеты представляют собой виды сетевых систем, использующих общую инфраструктуру Интернета для организации внутренней и внешней коммуникации в компаниях.\n\n1. **Интранеты:** Это частные сети, доступные только сотрудникам и членам определенной организации. Интранет обеспечивает внутреннюю коммуникацию, предоставляя средства для обмена информацией, совместной работы и доступа к внутренним ресурсам компании. Сотрудники могут использовать интранет для доступа к общим документам, внутренним новостям, коммуникации с коллегами и другими внутренними сервисам.\n\n2. **Экстранеты:** В отличие от интранетов, экстранеты расширяют свой доступ за пределы организации, предоставляя определенным внешним сторонам (например, клиентам, поставщикам или партнерам) ограниченный доступ к внутренним ресурсам. Экстранеты облегчают внешнюю коммуникацию и совместную работу между организацией и ее внешними контрагентами, предоставляя им безопасный доступ к необходимой информации.\n\nОба типа сетей используют общую инфраструктуру Интернета, такие как сети роутеров и провайдеры услуг Интернета (ISP). Это позволяет им обеспечивать доступ к информации и коммуникации, даже если участники находятся в разных местах. Интранеты и экстранеты являются эффективными инструментами для улучшения внутренней и внешней коммуникации в современных компаниях."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как изменить текущую директорию в командной строке с помощью команды CD?",
    "answer": "Чтобы изменить текущую директорию в командной строке с помощью команды CD, вы можете использовать следующие примеры:\n\n1. Перейти в корневую директорию диска:\n\n```\n\ncd\\\n\n```\n\n2. Перейти в конкретную папку, указав путь:\n\n```\n\ncd путь_к_папке\n\n```\n\n3. Перейти на уровень вверх (в родительскую директорию):\n\n```\n\ncd..\n\n```\n\n4. Перейти к рабочему столу (или другой пользовательской папке):\n\n```\n\ncd C:\\Users\\[ваше_имя]\\Desktop\n\n```\n\nПросто введите нужную команду в командной строке и нажмите Enter, чтобы изменить текущую директорию."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как перейти к корневой директории диска с использованием команды CD\ в командной строке?",
    "answer": "Для перехода к корневой директории диска с использованием команды `CD\` в командной строке, вам нужно просто ввести эту команду и нажать клавишу Enter. Вот пример:\n\n```\n\ncd\\\n\n```\n\nЭта команда перенесет вас в корневую директорию выбранного диска, например, на диск C:."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как навигироваться к конкретной папке в командной строке с использованием команды CD и указания пути?",
    "answer": 'Чтобы перейти к конкретной папке в командной строке с использованием команды CD и указания пути, выполните следующие шаги:\n\n1. Откройте командную строку (Command Prompt).\n\n2. Используйте команду CD, а затем укажите путь к желаемой папке. Например, если вы хотите перейти к папке System32 в директории C:\\Windows, введите следующую команду:\n\n```\n\ncd C:\\Windows\\System32\n\n```\n\nНажмите Enter.\n\nТеперь вы находитесь в указанной папке. Учтите, что путь к папке разделяется обратным слешем (\\), и команда CD регистронезависима, поэтому "cd", "Cd", и "CD" работают одинаково.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как изменить родительскую директорию в командной строке с помощью команды CD..?",
    "answer": 'Чтобы изменить родительскую директорию в командной строке с помощью команды CD.., выполните следующие шаги:\n\n1. Откройте командную строку.\n\n2. Если вы находитесь внутри какой-то папки, введите команду:\n\n```\n\ncd..\n\n```\n\n3. Нажмите Enter.\n\nЭта команда перенесет вас на один уровень вверх по дереву директорий. Например, если вы были в папке "C:\\Users\\ИмяПользователя\\Documents", то после выполнения команды вы переместитесь в "C:\\Users\\ИмяПользователя".'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как изменить директорию в командной строке на рабочий стол или другую пользовательскую папку?",
    "answer": 'Чтобы изменить директорию в командной строке на рабочий стол или другую пользовательскую папку, используйте команду CD с указанием полного пути к желаемой папке. Например, для перехода на рабочий стол введите следующую команду:\n\n```\n\ncd C:\\Users\\[ваше_имя_пользователя]\\Desktop\n\n```\n\nЗамените "[ваше_имя_пользователя]" на ваше фактическое имя пользователя. Эта команда изменит текущую директорию на рабочий стол.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как изменить диск в командной строке с использованием команды для смены диска?",
    "answer": 'Чтобы изменить диск в командной строке с использованием команды, вы можете просто ввести букву диска с двоеточием. Например, если вы хотите переключиться с диска C: на диск D:, введите:\n\n```\n\nD:\n\n```\n\nПосле этого нажмите Enter, и вы переключитесь на диск D: в командной строке.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как просмотреть содержимое директории в командной строке с использованием команды DIR?",
    "answer": 'Чтобы просмотреть содержимое директории в командной строке с использованием команды DIR, выполните следующие шаги:\n\n1. Откройте командную строку.\n\n2. Введите `DIR` и нажмите клавишу Enter.\n\nЭта команда отобразит список файлов и поддиректорий в текущей директории, а также некоторую информацию о каждом файле, такую как размер и дата последнего изменения.\n\nПример использования команды DIR:\n\n```\n\nDIR\n\n```\n\nЭто поможет вам быстро увидеть содержимое текущей директории и ориентироваться в файлах и папках.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как создать новую директорию с помощью командной строки с использованием команды MD?",
    "answer": 'Для создания новой директории с помощью командной строки и команды MD вам нужно использовать следующий синтаксис:\n\n```\n\nmd НоваяПапка\n\n```\n\nНапример, если вы хотите создать папку с именем "НоваяПапка" на диске D, вам нужно выполнить следующую команду:\n\n```\n\nmd D:\\НоваяПапка\n\n```\n\nТаким образом, команда `md` используется для создания новой директории, а после нее указывается путь к новой папке.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как переименовать файлы и папки с помощью команды REN в командной строке?",
    "answer": 'Чтобы переименовать файл или папку с помощью команды `REN` в командной строке, следуйте этим шагам:\n\n1. **Переименование файла:**\n\n- Откройте командную строку.\n\n- Используйте команду `ren` с текущим и новым именем файла. Например:\n\n```\n\nren старое_имя.txt новое_имя.txt\n\n```\n\n- Нажмите Enter. Файл будет переименован.\n\n2. **Переименование папки:**\n\n- Аналогично, используйте команду `ren` для переименования папки. Например:\n\n```\n\nren старое_имя_папки новое_имя_папки\n\n```\n\n- Нажмите Enter. Папка будет переименована.\n\nПримеры в команде `ren` указывают на текущее и новое имя файла или папки. Убедитесь, что вы находитесь в той же директории, где находится файл или папка, которую вы хотите переименовать.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как скопировать файлы в командной строке с использованием команды COPY?",
    "answer": 'Чтобы скопировать файлы в командной строке с использованием команды COPY, вам нужно ввести следующую команду:\n\n```\n\ncopy исходный_путь\\имя_файла расположение_назначения\\новое_имя_файла\n\n```\n\nПример:\n\n```\n\ncopy C:\\ИсходнаяПапка\\МойФайл.txt D:\\ЦелеваяПапка\\НовыйФайл.txt\n\n```\n\nЭта команда скопирует файл "МойФайл.txt" из "ИсходнаяПапка" на диске C в "ЦелеваяПапка" на диске D с новым именем "НовыйФайл.txt".'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как скопировать папки в командной строке вместе с их содержимым с использованием команды XCOPY?",
    "answer": 'Для копирования папок в командной строке вместе с их содержимым с использованием команды XCOPY, вы можете использовать следующий синтаксис:\n\n```\n\nXCOPY исходный_путь назначение /s /i\n\n```\n\nНапример, если вы хотите скопировать папку Digital_Citizen с ее содержимым из D:\\Digital_Citizen в C:\\Backup_Digital_Citizen, выполните следующую команду:\n\n```\n\nxcopy /s /i D:\\Digital_Citizen C:\\Backup_Digital_Citizen\n\n```\n\nГде:\n\n- `/s` говорит XCOPY скопировать все поддиректории (включая пустые).\n\n- `/i` говорит XCOPY, что назначение - это директория, если она не существует, и копировать все файлы в эту директорию.\n\nТаким образом, эта команда скопирует содержимое Digital_Citizen из D:\\Digital_Citizen в C:\\Backup_Digital_Citizen, сохраняя структуру поддиректорий.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как удалить файлы из директории с помощью команды DEL в командной строке?",
    "answer": 'Чтобы удалить файлы из директории с помощью команды DEL в командной строке, выполните следующие шаги:\n\n1. Откройте командную строку.\n\n2. Перейдите в директорию, где находятся файлы, которые вы хотите удалить. Используйте команду `cd` для навигации к нужной директории.\n\n3. После того как вы находитесь в нужной директории, выполните команду `del` с указанием имени файла или используйте шаблоны для удаления нескольких файлов. Например:\n\n```\n\ndel filename.txt\n\n```\n\n       или\n\n```\n\ndel *.txt\n\n```\n\nПервая команда удалит конкретный файл с именем `filename.txt`, а вторая команда удалит все файлы с расширением `.txt` в текущей директории.\n\n4. Подтвердите удаление, если система попросит вас подтвердить операцию.\n\nПримечание: Будьте осторожны при использовании команды `del`, так как удаленные файлы нельзя будет восстановить из корзины. Убедитесь, что вы уверены в необходимости удаления файлов.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как удалить пустую папку с помощью команды RD в командной строке?",
    "answer": 'Чтобы удалить пустую папку с помощью команды RD в командной строке, выполните следующие шаги:\n\n1. Откройте командную строку.\n\n2. Введите команду: `RD Название_Папки`\n\nНапример, если вы хотите удалить папку с именем "МояПапка", введите:\n\n```\n\nRD МояПапка\n\n```\n\n3. Нажмите Enter.\n\n   Обратите внимание, что команда RD удаляет только пустые папки. Если ваша папка содержит файлы или другие подпапки, вы должны удалить их сначала, прежде чем выполнить команду RD для удаления самой папки.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как запустить приложение из командной строки в Windows?",
    "answer": 'Чтобы запустить приложение из командной строки в Windows, нужно выполнить следующие шаги:\n\n1. Откройте командную строку.\n\n2. Перейдите в каталог, где находится исполняемый файл вашего приложения, используя команду `cd` (Change Directory).\n\nПример:\n\n```\n\ncd C:\\Путь\\К\\Папке\\С\\Приложением\n\n\```\n\n3. После того как вы находитесь в нужной директории, введите имя исполняемого файла вашего приложения и нажмите Enter.\n\n Пример:\n\n      ```\n\n       Название_Приложения.exe\n\n       ```\n\n    Таким образом, вы запустите приложение из командной строки в Windows.'
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как получить справку в командной строке с использованием команды HELP?",
    "answer": 'Для получения справки в командной строке с использованием команды HELP, просто введите "help" и нажмите клавишу Enter. Это отобразит список всех доступных команд. Если вы хотите получить справку по конкретной команде, введите "help" перед именем этой команды или используйте параметр "/?" после имени команды. Например, "help cd" или "cd /?".'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Какие заголовки используются для создания уровней в статье на GitHub, и какой синтаксис для этого используется?",
    "answer": 'Для создания уровней заголовков в статье на GitHub используются символы "#" перед текстом заголовка. Количество символов "#" определяет уровень заголовка. Например:\n\n    - Первый уровень заголовка: `# Заголовок первого уровня`\n\n    - Второй уровень заголовка: `## Заголовок второго уровня`\n\n    - Третий уровень заголовка: `### Заголовок третьего уровня`\n\n    И так далее. Это позволяет создавать иерархию заголовков с различными уровнями и размерами шрифта.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как можно выделить текст в статье для придания ему различных стилей, таких как жирный, курсив, перечеркнутый и другие?",
    "answer": 'Для выделения текста в статье на GitHub и придания ему различных стилей используются следующие синтаксисы:\n\n    - **Жирный текст:** Для создания жирного текста используйте двойные звездочки или подчеркивания. Пример: `**Этот текст жирный**`.\n\n    - *Курсив:* Для создания курсивного текста используйте одинарные звездочки или подчеркивания. Пример: `*Этот текст курсивный*`.\n\n    - ~~Перечеркнутый текст:~~ Для создания перечеркнутого текста используйте две тильды. Пример: `~~Этот текст перечеркнутый~~`.\n\n    - **Жирный и вложенный курсив:** Можно комбинировать стили. Пример: `**Этот текст _жирный и вложенный курсив_**`.\n\n    Примеры выше покажут, как текст будет выглядеть после рендеринга на GitHub.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как цитировать текст в статье на GitHub, и как это визуально отображается?",
    "answer": 'Для цитирования текста в статье на GitHub используется символ `>`. Просто поставьте символ `>` перед цитируемым текстом. Вот пример:\n\n   ```markdown\n\n    > Этот текст является цитатой в статье на GitHub.\n\n    ```\n\n    Этот код будет отображен вот так:\n\n    > Этот текст является цитатой в статье на GitHub.\n\n    Цитированный текст будет визуально выделен, отступлен и иметь другой цвет, что позволяет явно выделить цитаты от остального контента.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как выделять и форматировать код или команды в статье, используя различные синтаксические элементы?",
    "answer": 'В статье на GitHub для выделения и форматирования кода или команд используются различные синтаксические элементы. \n\n   1. **Одинарные обратные кавычки:**\n\n      - Если вы хотите выделить короткий фрагмент кода в пределах строки, используйте одинарные обратные кавычки. Например: \`git status\`.\n\n    2. **Тройные обратные кавычки:**\n\n      - Для создания блока кода используются тройные обратные кавычки. Это особенно полезно при форматировании нескольких строк кода. Пример:\n\n         ```\n\n         git status\n\n         git add\n\n         git commit\n\n         ```\n\n    Эти синтаксические элементы помогают сохранить форматирование кода при отображении статьи на GitHub.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как вставлять и отображать цвета в тексте статьи на GitHub?",
    "answer": 'Для вставки и отображения цветов в тексте статьи на GitHub используется синтаксис HEX, RGB и HSL. Вот примеры:\n\n    1. HEX:\n\n```\n\n       Цвет фона: `#ffffff` (светлый режим) и `#000000` (тёмный режим).\n\n       ```\n\n    2. **RGB:**\n\n       ```\n\n       Цвет текста: `rgb(9, 105, 218)`.\n\n       ```\n\n    3. **HSL:**\n\n       ```\n\n     Цвет подсветки: `hsl(212, 92%, 45%)`.\n\n    ```\n\n    Примечания:\n\n   - Вставляйте цвета внутри обратных кавычек, чтобы они отображались как код цвета.\n\n    - Визуализация цветов поддерживается только в issues, pull requests и discussions.\n\n    - Не добавляйте пробелов в начале или конце кода цвета в обратных кавычках.\n\n    Это простой способ вставлять и представлять цвета в тексте статьи на GitHub.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как создавать ссылки в статье, в том числе на внутренние и внешние ресурсы?",
    "answer": 'Для создания ссылок в статье на GitHub используется следующий синтаксис:\n\n  Внутренние ссылки:\n\n    Для относительных ссылок на файлы в том же репозитории используйте квадратные скобки для текста ссылки и круглые скобки для пути к файлу: [Текст ссылки](путь_к_файлу).\n\n    Пример: [Contribution guidelines for this project](docs/CONTRIBUTING.md).\n\n    Внешние ссылки:\n\n    Просто вставьте полный URL в круглые скобки.\n\n    Пример: [GitHub Pages](https://pages.github.com/)'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как вставлять и отображать изображения в статье на GitHub, и как использовать относительные ссылки для изображений?",
    "answer": 'Чтобы вставить и отобразить изображение в статье на GitHub, используйте следующий синтаксис:\n\n    ```\n\n    ![Описание изображения](ссылка_на_изображение)\n\n    ```\n\n    где:\n\n    - "Описание изображения" - это текст, который будет отображаться в случае, если изображение не загрузится.\n\n    - "ссылка_на_изображение" - это ссылка на изображение.\n\n    Если изображение находится в том же репозитории, вы можете использовать относительную ссылку. Например:\n\n    ```\n\n    ![Описание изображения](путь_к_изображению_в_репозитории)\n\n    ```\n\n    где "путь_к_изображению_в_репозитории" - это путь к изображению внутри вашего репозитория.\n\n    Пример использования относительной ссылки:\n\n    ```\n\n   ![Octocat](./assets/images/octocat.png)\n\n   ```\n\n    В этом примере "Octocat" - описание изображения, а "./assets/images/octocat.png" - относительный путь к изображению в репозитории.\n\n    Этот синтаксис поможет вам успешно вставлять и отображать изображения в ваших статьях на GitHub.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как можно создавать и управлять списками в статье, включая неупорядоченные, упорядоченные и вложенные списки?",
    "answer": '**Неупорядоченные списки:**\n\n    Для создания неупорядоченного списка используйте `-`, `*` или `+` перед каждым элементом\n\n    **Упорядоченные списки:**\n\n    Для упорядоченного списка используйте номер и точку\n\n   **Вложенные списки:**\n\n    Для создания вложенных списков используйте отступы или пробелы:\n\n     Таким образом, вы можете легко создавать и управлять различными типами списков в своих статьях на GitHub.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как создавать и использовать задачи в статье, и как отмечать их как выполненные?",
    "answer": 'Для создания задач в статье на GitHub используется синтаксис с префиксом `- [ ]`. Например:\n\n    ```\n\n    - [ ] Задача номер один\n\n    - [ ] Задача номер два\n\n    - [ ] Задача номер три\n\n    ```\n\n    Чтобы отметить задачу как выполненную, используйте `[x]`:\n\n    ```\n\n    - [x] Выполненная задача\n\n    - [ ] Невыполненная задача\n\n    ```\n\n    Также можно использовать синтаксис с обратным слешем `\` для задач с описанием:\n\n    ```\n\n    - [ ] \\(Опционально) Открыть следующую задачу\n\n    ```\n\n  Такие задачи можно отмечать как выполненные или невыполненные.'
  },
  {
    "topic": 'Week1, Module "Getting to know version control system Git"',
    "question": "Как упоминать людей и команды в статье на GitHub, и как это влияет на уведомления и коммуникацию?",
    "answer": 'В статье на GitHub вы можете упоминать людей и команды, добавляя символ "@" перед их именем пользователя или названием команды. Это действие инициирует уведомление для упомянутых пользователей или членов команды, привлекая их внимание к конкретному участку статьи.\n\nНапример, если вы напишете "@username, что вы думаете об этих обновлениях?", то пользователь с именем "username" получит уведомление о вашем упоминании в комментариях или тексте статьи. Также, если упомянуть целую команду, все ее члены получат уведомление.\n\n    Это удобно для направленной коммуникации и облегчает обсуждение изменений или задач в рамках проекта на GitHub.'},
    {
      "topic": 'Week1, Module "Getting to know version control system Git"',
      "question": "Как ссылаться на проблемы (issues) и запросы на вытягивание (pull requests) в статье, и как это облегчает взаимодействие с репозиторием?",
      "answer": 'Для ссылки на проблемы и запросы на вытягивание в статье на GitHub используется символ `#` перед номером проблемы или запроса на вытягивание. Например, чтобы ссылаться на проблему с номером 42, нужно написать `#42`. Также, можно использовать часть заголовка проблемы или запроса после символа `#` для более точной ссылки.\n\n     Примеры:\n\n      - `#42` ссылается на проблему с номером 42.\n\n      - `#issue-title` ссылается на проблему с заголовком "issue title".\n\n      - `#25` ссылается на запрос на вытягивание с номером 25.\n\n      Это облегчает взаимодействие с репозиторием, так как позволяет быстро перейти к конкретным проблемам или запросам на вытягивание, обсудить их и провести необходимые изменения.'},
      {
        "topic": 'Week1, Module "Getting to know version control system Git"',
        "question": "Как использовать алерты в статье для выделения важной информации, и какие типы алертов доступны?",
        "answer": 'Вы можете использовать алерты в статье на GitHub, чтобы выделить важную информацию. Доступны следующие типы алертов:\n\n        1. **Note (Примечание):**\n\n           ```\n\n           > [!NOTE]\n\n           > Важная информация, которую пользователи должны знать, даже если они только просматривают контент.\n\n          ```\n\n        2. **Tip (Совет):**\n\n          ```\n\n           > [!TIP]\n\n           > Полезные советы для более эффективного выполнения задач.\n\n           ```\n\n        3. **Important (Важно):**\n\n          ```\n\n           > [!IMPORTANT]\n\n           > Ключевая информация, необходимая пользователям для достижения своей цели.\n\n           ```\n\n        4. **Warning (Предупреждение):**\n\n           ```\n\n           > [!WARNING]\n\n           > Срочная информация, требующая мгновенного внимания, чтобы избежать проблем.\n\n           ```\n\n        5. **Caution (Осторожность):**\n\n           ```\n\n         > [!CAUTION]\n\n           > Предупреждение об опасностях или негативных последствиях определенных действий.\n\n           ```\n\n        Просто вставьте соответствующий синтаксис в вашу статью, чтобы создать нужный тип алерта и выделить важную часть информации.'},
        {
          "topic": 'Week1, Module "Getting to know version control system Git"',
          "question": "Как скрывать контент в статье с использованием комментариев, и в каких случаях это может быть полезно?",
          "answer": 'Вы можете скрывать контент в статье на GitHub с использованием HTML-комментариев. Просто поместите контент, который вы хотите скрыть, между комментариями \<!-- и -->. \n\n       Это может быть полезно, например, когда у вас есть информация, которую вы хотите оставить в исходном коде файла, но не хотите, чтобы она отображалась в рендеринге для конечного пользователя.'
        },
        {
          "topic": 'Week1, Module "Getting to know version control system Git"',
          "question": "Как отключать рендеринг Markdown для просмотра исходного кода файла на GitHub?",
          "answer": 'Для отключения рендеринга Markdown и просмотра исходного кода файла на GitHub, нужно нажать на кнопку "Code" в верхней части файла.'
        },
        {
          "topic": 'Week1, Module "Getting to know version control system Git"',
          "question": "Как использовать эмодзи в тексте статьи, и какие существуют коды для различных эмодзи?",
          "answer": 'Для использования эмодзи в тексте статьи на GitHub, вам нужно ввести код эмодзи, заключив его в двоеточия. Например, `:smile:` превратится в 😄. Вот несколько примеров кодов для различных эмодзи:\n\n         - `:smile:` - 😄\n\n          - `:+1:` - 👍\n\n          - `:shipit:` - 🚢\n\n          Вы также можете использовать клавишу `:` для вызова списка предложенных эмодзи и выбора нужного. Например, если вы начнете набирать `:`, появится список эмодзи для выбора.\n\n          Таким образом, использование эмодзи на GitHub - это просто вставка их кодов в текст, и GitHub автоматически заменит коды на соответствующие изображения.'
        },
];

let currentPairIndex = 0;
let filteredPairs = qaPairs;

const topicSelect = document.getElementById("topic-select");
const questionElement = document.getElementById("question");
const answerElement = document.getElementById("answer");
const nextBtn = document.getElementById("next-btn");

const uniqueTopics = [...new Set(qaPairs.map(pair => pair.topic))];

uniqueTopics.forEach(topic => {
    const option = document.createElement("option");
    option.value = topic;
    option.text = topic;
    topicSelect.add(option);
});

topicSelect.addEventListener("change", () => {
    currentPairIndex = 0;
    filterPairs();
    showQA();
});

function filterPairs() {
    const selectedTopic = topicSelect.value;
    filteredPairs = qaPairs.filter(pair => pair.topic === selectedTopic);
}

function showQA() {
  if (filteredPairs.length > 0) {
      const currentPair = filteredPairs[currentPairIndex];
      questionElement.textContent = currentPair.question;
      answerElement.innerHTML = currentPair.answer.replace(/\n/g, "<br>"); // Заменяем \n на <br> для отображения переносов строк
  } else {
      questionElement.textContent = "Нет вопросов для выбранной темы.";
      answerElement.textContent = "";
  }
}

function showNextQA() {
    currentPairIndex++;
    if (currentPairIndex < filteredPairs.length) {
        showQA();
    } else {
        alert("Вы прочитали все вопросы и ответы!");
    }
}

nextBtn.addEventListener("click", showNextQA);

// Инициализация
filterPairs();
showQA();