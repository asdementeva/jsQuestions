// const qaPairs = [
//   {
//     "question": "Основные принципы ООП?",
//     "answer": `1. **Инкапсуляция (Encapsulation):**
//        - *Определение:* Инкапсуляция представляет собой принцип сокрытия деталей реализации и предоставления интерфейса для взаимодействия с объектом.
//        - *Пример:* Класс с методами и свойствами, где методы обеспечивают доступ к данным и их изменение, а детали реализации скрыты.


//     2. **Наследование (Inheritance):**
//        - *Определение:* Наследование позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.
//        - *Пример:* Класс "Птица" наследует от класса "Животное", получая общие характеристики, но может иметь уникальные свойства, например, "размах крыльев".


//     3. **Полиморфизм (Polymorphism):**
//        - *Определение:* Полиморфизм позволяет объектам использовать методы базового класса в специфичной для своего класса форме.
//        - *Пример:* Метод "рисовать" в различных классах (круг, квадрат) будет реализован по-разному, но интерфейс остается одинаковым.


//     4. **Абстракция (Abstraction):**
//        - *Определение:* Абстракция предоставляет упрощенное представление объекта, скрывая ненужные детали.
//        - *Пример:* Когда мы работаем с автомобилем, нас интересует его движение и управление, а не внутренние механизмы работы двигателя.


//     5. **Композиция (Composition):**
//        - *Определение:* Композиция позволяет создавать сложные объекты из более простых, объединяя их в один объект.
//        - *Пример:* Объект "Автомобиль" может включать в себя объекты "Двигатель", "Колеса" и "Руль".


//     Эти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.
//     `
//   },
//   {
//     "question": "Что такое SOLID?",
//     "answer": `1. **Принцип единственной ответственности (Single Responsibility Principle - SRP):**
//        - *Определение:* Каждый класс должен иметь только одну причину для изменения.
//        - *Пример:* Класс управления базой данных не должен быть ответственен за отображение данных. Разделение ответственности улучшает поддерживаемость кода.

//     2. **Принцип открытости/закрытости (Open/Closed Principle - OCP):**
//        - *Определение:* Программные сущности должны быть открыты для расширения, но закрыты для модификации.
//        - *Пример:* Использование интерфейсов и абстрактных классов для создания расширяемых модулей без изменения исходного кода.

//     3. **Принцип подстановки Барбары Лисков (Liskov Substitution Principle - LSP):**
//        - *Определение:* Объект базового класса должен быть заменяем объектом его производного класса без изменения корректности программы.
//        - *Пример:* Если у нас есть класс "Птица", то мы должны безопасно использовать его подклассы, такие как "Ласточка" или "Орёл", не нарушая логику программы.

//     4. **Принцип разделения интерфейса (Interface Segregation Principle - ISP):**
//        - *Определение:* Клиенты не должны зависеть от интерфейсов, которые они не используют.
//        - *Пример:* Разделение интерфейсов для разных клиентов, чтобы каждый клиент имел доступ только к необходимым методам.

//     5. **Принцип инверсии зависимостей (Dependency Inversion Principle - DIP):**
//        - *Определение:* Модули верхнего уровня не должны зависеть от модулей нижнего уровня. Оба типа модулей должны зависеть от абстракций.
//        - *Пример:* Внедрение зависимости (dependency injection) для обеспечения обратной зависимости между модулями.

//     Эти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.
//     `
//   },
//   {
//     "question": "Разница между классовым и прототипным наследованием?",
//     "answer":  `### Разница между классовым и прототипным наследованием в JavaScript:

//     1. **Классовое наследование:**
//        - *Определение:* Введено в ECMAScript 2015 (ES6) с использованием ключевого\n слова 'class'.
//        - *Синтаксис:*\n
//          'javascript
//          class Animal {
//            constructor(name) {
//              this.name = name;
//            }

//            sound() {
//              console.log('Generic animal sound');
//            }
//          }

//          class Dog extends Animal {
//            constructor(name, breed) {
//              super(name);
//              this.breed = breed;
//            }

//            sound() {
//              console.log('Bark');
//            }
//          }

//          const myDog = new Dog('Buddy', 'Labrador');
//         '

//     2. **Прототипное наследование:**
//        - *Определение:* Базируется на использовании прототипов объектов.
//        - *Синтаксис:*
//          'javascript
//          function Animal(name) {
//            this.name = name;
//          }

//          Animal.prototype.sound = function() {
//            console.log('Generic animal sound');
//          };

//          function Dog(name, breed) {
//            Animal.call(this, name);
//            this.breed = breed;
//          }

//          Dog.prototype = Object.create(Animal.prototype);
//          Dog.prototype.constructor = Dog;

//          Dog.prototype.sound = function() {
//            console.log('Bark');
//          };

//          const myDog = new Dog('Buddy', 'Labrador');
//          '

//     **Различия:**

//     - **Синтаксис:** Классы предоставляют более удобный и декларативный синтаксис\n для создания и наследования объектов.
//     - **Ключевые слова:** В классах используются ключевые слова 'class', 'extends', и 'super', что делает код более ясным.
//     - **Прототипы:** В прототипном наследовании работа напрямую с прототипами объектов, создавая цепочку прототипов.

//     **Общее:**

//     - В классовом наследовании под капотом также используются прототипы, но скрыты от\n разработчика.
//     - Использование 'super' в классах и 'Object.create()' в прототипном наследовании для вызова конструкторов родительских классов/функций.

//     Выбор между классовым и прототипным наследованием зависит от стиля разработки и\n требований проекта. В современных приложениях классы чаще предпочтительны.
//     `
//   }
// ];




const qaPairs = [
  {
    "topic": "Основы ООП",
    "question": "Основные принципы ООП?",
    "answer": 'Основные принципы ООП:\n1. Инкапсуляция (Encapsulation):\n\n- Определение: Инкапсуляция представляет собой принцип сокрытия деталей реализации и предоставления интерфейса для взаимодействия с объектом.\n\n- Пример: Класс с методами и свойствами, где методы обеспечивают доступ к данным и их изменение, а детали реализации скрыты.\n\n2. Наследование (Inheritance):\n\n- Определение: Наследование позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.\n\n- Пример: Класс "Птица" наследует от класса "Животное", получая общие характеристики, но может иметь уникальные свойства, например, "размах крыльев".\n\n3. Полиморфизм (Polymorphism):\n\n- Определение: Полиморфизм позволяет объектам использовать методы базового класса в специфичной для своего класса форме.\n\n- Пример: Метод "рисовать" в различных классах (круг, квадрат) будет реализован по-разному, но интерфейс остается одинаковым.\n\n4. Абстракция (Abstraction):\n\n- Определение: Абстракция предоставляет упрощенное представление объекта, скрывая ненужные детали.\n\n- Пример: Когда мы работаем с автомобилем, нас интересует его движение и управление, а не внутренние механизмы работы двигателя.\n\n5. Композиция (Composition):\n\n- Определение: Композиция позволяет создавать сложные объекты из более простых, объединяя их в один объект.\n\n- Пример: Объект "Автомобиль" может включать в себя объекты "Двигатель", "Колеса" и "Руль".\n\nЭти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.'
  },
  {
    "topic": "Основы ООП",
    "question": "2.	Что такое SOLID?",
    "answer": 'Основные принципы ООП:\n1. Инкапсуляция (Encapsulation):\n\n- Определение: Инкапсуляция представляет собой принцип сокрытия деталей реализации и предоставления интерфейса для взаимодействия с объектом.\n- Пример: Класс с методами и свойствами, где методы обеспечивают доступ к данным и их изменение, а детали реализации скрыты.\n\n2. Наследование (Inheritance):\n\n- Определение: Наследование позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.\n- Пример: Класс "Птица" наследует от класса "Животное", получая общие характеристики, но может иметь уникальные свойства, например, "размах крыльев".\n\n3. Полиморфизм (Polymorphism):\n\n- Определение: Полиморфизм позволяет объектам использовать методы базового класса в специфичной для своего класса форме.\n- Пример: Метод "рисовать" в различных классах (круг, квадрат) будет реализован по-разному, но интерфейс остается одинаковым.\n\n4. Абстракция (Abstraction):\n\n- Определение: Абстракция предоставляет упрощенное представление объекта, скрывая ненужные детали.\n- Пример: Когда мы работаем с автомобилем, нас интересует его движение и управление, а не внутренние механизмы работы двигателя.\n\n5. Композиция (Composition):\n\n- Определение: Композиция позволяет создавать сложные объекты из более простых, объединяя их в один объект.\n- Пример: Объект "Автомобиль" может включать в себя объекты "Двигатель", "Колеса" и "Руль".\n\nЭти принципы обеспечивают структурирование и организацию кода в объектно-ориентированном программировании, делая его более гибким и понятным.'
  },
  // ... другие вопросы ...
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Каковы основные принципы технической инфраструктуры Интернета, и в чем заключается разница между Интернетом и Вебом?",
    "answer": "Основные принципы технической инфраструктуры Интернета включают в себя идею объединения большого количества компьютеров в одну сеть для обмена информацией. Интернет - это большая сеть компьютеров, которые взаимодействуют друг с другом.\n\nРазница между Интернетом и Вебом заключается в том, что Интернет - это техническая инфраструктура, обеспечивающая соединение компьютеров, в то время как Веб - это одна из услуг, предоставляемых на основе Интернета. Веб представляет собой сервис, где определенные компьютеры, называемые веб-серверами, могут отправлять понятные браузерам сообщения. Таким образом, Интернет является инфраструктурой, а Веб - это одна из услуг, работающая поверх этой инфраструктуры."
  },
  // ... другие вопросы ...
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Каковы основные принципы технической инфраструктуры Интернета, и в чем заключается разница между Интернетом и Вебом?",
    "answer": "Развитие Интернета началось в 1960-х годах как исследовательский проект, финансируемый армией США. В 1980-х годах он превратился в публичную инфраструктуру с поддержкой университетов и частных компаний. Ключевые этапы в истории Интернета включают его начало как военного исследовательского проекта в 1960-х, эволюцию в публичную инфраструктуру в 1980-х, и последующее развитие технологий, хотя основные принципы его работы остались неизменными."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как работает сеть между двумя компьютерами, и почему использование роутера становится важным при подключении большего количества компьютеров?",
    "answer": "Когда два компьютера должны взаимодействовать, их необходимо связать, обычно с использованием физического соединения, такого как Ethernet-кабель, или беспроводных технологий, например, Wi-Fi или Bluetooth. В статье упоминается, что при подключении большего количества компьютеров становится проблематичным использование прямого соединения, так как это требует множества кабелей.\n\nДля решения этой проблемы каждый компьютер на сети подключается к специальному устройству, называемому роутером. Роутер выполняет роль сигнального агента на станции, направляя сообщения от одного компьютера к другому и управляя передачей данных. Таким образом, роутер позволяет эффективно связывать большое количество компьютеров, минимизируя количество необходимых соединительных кабелей.\n\nВажность роутера заключается в том, что он действует как посредник, обеспечивая правильную передачу сообщений между компьютерами в сети. Это позволяет эффективно управлять обменом данными и избежать необходимости использования большого количества прямых соединений между каждой парой компьютеров."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Почему использование модема важно для подключения нашей сети к телефонной инфраструктуре?",
    "answer": "Использование модема важно для подключения нашей сети к телефонной инфраструктуре, потому что модем выполняет функцию преобразования информации из нашей компьютерной сети в формат, который может передаваться по телефонным линиям, и наоборот. Модем преобразует цифровые данные компьютера в аналоговые сигналы, которые могут передаваться через телефонные провода, и обратно. Таким образом, модем обеспечивает совместимость между цифровыми данными компьютера и аналоговой телефонной инфраструктурой, позволяя нам подключаться к Интернету через телефонные линии."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Как сообщения передаются через Интернет от исходной сети к целевой, и как в этот процесс вовлечены поставщики услуг Интернета (ISP)?",
    "answer": "Сообщения передаются через Интернет от исходной сети к целевой следующим образом. Первым шагом компьютер, отправляющий сообщение, отправляет его своему роутеру. Роутер направляет сообщение к другим роутерам, используя сеть роутеров, соединенных между собой. Когда сообщение достигает роутера поставщика услуг Интернета (ISP), ISP принимает его и маршрутизирует дальше через свою сеть.\n\nЗатем сообщение проходит через сеть различных ISP, если необходимо, и, наконец, достигает целевого роутера. Этот роутер направляет сообщение к конечному компьютеру-получателю. Таким образом, поставщики услуг Интернета играют роль посредников в передаче сообщений, обеспечивая их маршрутизацию через различные части Интернета до достижения целевого узла."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Какова роль IP-адреса в сети, и как он используется для отправки сообщений компьютеру?",
    "answer": "Роль IP-адреса в сети заключается в том, чтобы уникально идентифицировать каждый компьютер или устройство в сети. IP-адрес (где IP означает Internet Protocol) представляет собой уникальный набор чисел, который присваивается каждому устройству, подключенному к сети. Этот адрес используется для точного определения отправителя и получателя сообщений.\n\nКогда компьютер отправляет сообщение, оно снабжается IP-адресом получателя. Этот адрес указывает, куда должно быть направлено сообщение в сети. Роутеры и другие устройства на пути сообщения используют IP-адреса для маршрутизации данных к конечному узлу, который имеет соответствующий IP-адрес.\n\nТаким образом, IP-адрес играет ключевую роль в определении и маршрутизации сообщений в сети, обеспечивая точную доставку данных от отправителя к получателю."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Какие преимущества и особенности у веб-браузера при взаимодействии с Интернетом?",
    "answer": "Веб-браузер предоставляет пользователю доступ к Интернету и обладает несколькими преимуществами и особенностями. Основная функция браузера - отображение веб-страниц, что позволяет пользователям легко перемещаться между различными сайтами, используя функции навигации, такие как гиперссылки.\n\nБраузер позволяет пользователям сохранять закладки на интересующие их страницы и вести историю посещенных сайтов для более удобного доступа к ним в будущем. Он также поддерживает различные форматы контента, включая изображения, видео и звук, обогащая пользовательский опыт.\n\nПользователи могут расширять функциональность браузера, устанавливая различные дополнения, такие как блокировщики рекламы, менеджеры паролей и темы. Современные браузеры обеспечивают высокий уровень безопасности, защищая от вредоносных программ, и предоставляют режим приватности для безопасного просмотра без сохранения истории и данных.\n\nБраузеры также облегчают ввод информации, автоматически заполняя данные в веб-формах. Их совместимость с различными операционными системами позволяет пользователям выбирать удобное устройство для доступа к интернету. В целом, веб-браузеры предоставляют удобный и многофункциональный инструмент для взаимодействия с Интернетом, обеспечивая разнообразные возможности и комфорт при использовании сети."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "В чем отличие между Интернетом и Вебом, и какой сервис предоставляется на основе Интернета?",
    "answer": "Отличие между Интернетом и Вебом заключается в следующем:\n\n1. **Интернет:** Это техническая инфраструктура, обеспечивающая соединение множества компьютеров по всему миру. Интернет представляет собой огромную сеть, где компьютеры могут взаимодействовать друг с другом. Это базовая инфраструктура, объединяющая компьютеры, чтобы они могли обмениваться информацией.\n\n2. **Веб:** Это одна из услуг, предоставляемых на основе Интернета. Веб (или Всемирная паутина) представляет собой сервис, где определенные компьютеры, известные как веб-серверы, могут отправлять понятные браузерам сообщения. Когда мы говорим о просмотре веб-страниц, отправке электронной почты или использовании других веб-сервисов, мы обращаемся именно к услуге Веба.\n\nТаким образом, Интернет - это техническая основа, объединяющая компьютеры в глобальную сеть, а Веб - это одна из многих услуг, работающих поверх этой инфраструктуры. Важно отметить, что помимо Веба на основе Интернета существуют и другие сервисы, такие как электронная почта и IRC (Internet Relay Chat)."
  },
  {
    "topic": 'Week1, Module "Chrome Dev Tools, VS Code, Terminal"',
    "question": "Что такое интранеты и экстранеты, и как они используют общую инфраструктуру Интернета для организации внутренней и внешней коммуникации в компаниях?",
    "answer": "Интранеты и экстранеты представляют собой виды сетевых систем, использующих общую инфраструктуру Интернета для организации внутренней и внешней коммуникации в компаниях.\n\n1. **Интранеты:** Это частные сети, доступные только сотрудникам и членам определенной организации. Интранет обеспечивает внутреннюю коммуникацию, предоставляя средства для обмена информацией, совместной работы и доступа к внутренним ресурсам компании. Сотрудники могут использовать интранет для доступа к общим документам, внутренним новостям, коммуникации с коллегами и другими внутренними сервисам.\n\n2. **Экстранеты:** В отличие от интранетов, экстранеты расширяют свой доступ за пределы организации, предоставляя определенным внешним сторонам (например, клиентам, поставщикам или партнерам) ограниченный доступ к внутренним ресурсам. Экстранеты облегчают внешнюю коммуникацию и совместную работу между организацией и ее внешними контрагентами, предоставляя им безопасный доступ к необходимой информации.\n\nОба типа сетей используют общую инфраструктуру Интернета, такие как сети роутеров и провайдеры услуг Интернета (ISP). Это позволяет им обеспечивать доступ к информации и коммуникации, даже если участники находятся в разных местах. Интранеты и экстранеты являются эффективными инструментами для улучшения внутренней и внешней коммуникации в современных компаниях."
  },
];

let currentPairIndex = 0;
let filteredPairs = qaPairs;

const topicSelect = document.getElementById("topic-select");
const questionElement = document.getElementById("question");
const answerElement = document.getElementById("answer");
const nextBtn = document.getElementById("next-btn");

const uniqueTopics = [...new Set(qaPairs.map(pair => pair.topic))];

uniqueTopics.forEach(topic => {
    const option = document.createElement("option");
    option.value = topic;
    option.text = topic;
    topicSelect.add(option);
});

topicSelect.addEventListener("change", () => {
    currentPairIndex = 0;
    filterPairs();
    showQA();
});

function filterPairs() {
    const selectedTopic = topicSelect.value;
    filteredPairs = qaPairs.filter(pair => pair.topic === selectedTopic);
}

function showQA() {
  if (filteredPairs.length > 0) {
      const currentPair = filteredPairs[currentPairIndex];
      questionElement.textContent = currentPair.question;
      answerElement.innerHTML = currentPair.answer.replace(/\n/g, "<br>"); // Заменяем \n на <br> для отображения переносов строк
  } else {
      questionElement.textContent = "Нет вопросов для выбранной темы.";
      answerElement.textContent = "";
  }
}

function showNextQA() {
    currentPairIndex++;
    if (currentPairIndex < filteredPairs.length) {
        showQA();
    } else {
        alert("Вы прочитали все вопросы и ответы!");
    }
}

nextBtn.addEventListener("click", showNextQA);

// Инициализация
filterPairs();
showQA();